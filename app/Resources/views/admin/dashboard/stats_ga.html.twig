{% extends ":admin/dashboard:block.html.twig" %}
{% trans_default_domain 'messages' %}
{#
@param apiKey
@param dataIds
@param clientId
#}
{% block content %}
{% spaceless %}
<script type="text/javascript">
/* jshint undef: true, unused: true */
/* global $: false */
/* global Ecollect: true */
/* global console: true */
/* global google: false */
/* global gapi: false */

{#
@see https://developers.google.com/analytics/solutions/articles/gdataAnalyticsCharts?hl=de-DE&csw=1
@see https://developers.google.com/analytics/devguides/config/mgmt/v3/
@see https://developers.google.com/api-client-library/javascript/start/start-js
Pour afficher le diagramme de trafic il faut
 * Une Google Application (clientId et apiKey)
 * Authoriser le site à inspecter les data analytics (scopes)
 * Extraire les data Ecollect.Report.makeApiCall()
 * Transformer les data obtenus Ecollect.Report.getVisitorChartData()
 * Encasulé cela dans un chartObj Ecollect.Report.getBarChart() et Ecollect.Report.getPieChart()
 * générer l'url d'une image et l'insérer dans le DOM Ecollect.Report.drawChart

Pour éviter de faire cela trop souvent (attentions aux QUERY_LIMITS de Google) j'encapsule tous cela dans le localStorage via
l'api Ecollect.localStore ou je cache l'url généré

#}

Ecollect = {};

/**
 * Cette fonction permet de gérer du cache dans le localStorage
 * si la fonctionnalité est supporté dans le navigateur
 */
Ecollect.localStore = {};
Ecollect.localStore.cache = function(key, callback, delay) {

	if(typeof(delay)==='undefined') {
		delay = 5; //5min par defaut
	}

	if(Modernizr.localstorage) {
		//Si le localStorage est en place on utilise 2 clefs
		//ga-visits-expire et ga-visits
		//rien en cache, on initialise le cache
		var data = callback();
		localStorage.setItem(key, JSON.stringify(data));
		localStorage.setItem(key+'-expire', new Date().getTime()+(delay*60000)); // 60000 = 1min 5*60000 = 5min
		console.debug('data cached in localStorage');
		return data;

	} else {
		//pas de cache; on fait tjrs l'apiCall
		console.info('no localStorage');
		return false;
	}
};

Ecollect.localStore.get = function(key) {
	if(Modernizr.localstorage) {
		var expire = localStorage.getItem(key+'-expire');
		if( expire) {
			if (expire >= new Date().getTime()) {
				console.debug('found in cache');
				return  JSON.parse(localStorage.getItem(key));
			}

		}
		console.debug('not found in cache');
	} else {
		console.info('no localStorage');
	}
	return false;
};

Ecollect.localStore.clear = function() {
	if(Modernizr.localstorage) {
		return localStorage.clear();
	}
	return false;
};

//On défini le namespace Ecollect.Report
Ecollect.Report = {};


//Helper method to get the sum of values in an array.
Ecollect.getArraySum = function(input) {
	var total = 0;
	for (var i = 0; i < input.length; i++) {
		total += input[i];
	}
	return total;
};

//Helper
Ecollect.fillToSameSize = function (firstArray, secondArray) {
	var fillValue = 0;
	if (firstArray.length < secondArray.length) {
		firstArray.push(fillValue);
	} else if (secondArray.length < firstArray.length) {
		secondArray.push(fillValue);
	}
};

//Helper
Ecollect.scaleData = function (currMax) {
	var result = [0, 0];
	// Determine order of magnitude (number of digits left of decimal).
	var magnitude = Math.log(currMax) / Math.LN10;
	magnitude = Math.ceil(magnitude);

	var newMax = Math.pow(10, magnitude);
	if (newMax / 5 > currMax) {
		newMax = newMax / 5;
	}
	while (newMax > (currMax * 2)) {
		newMax = newMax / 2;
	}

	var step = newMax / 5;
	result[0] = newMax;
	result[1] = step;
	return result;
};

//Helper générique
Ecollect.Report.getChartObj = function () {
	var params_ = {
		'chs': '', // Image Dimensions
		'chtt': '', // Title
		'chxt': '', // Axes
		'chts': '', // Title Style
		'cht': '', // Chart type
		'chd': '', // Data
		'chdl': '', // Legend
		'chco': '', // Colors
		'chbh': '', // Width and spacing
		'chxl': '', // Axis Labels
		'chds': '', // Scaling
		'chxr': '', // Axis Scaling
		'chm': ''   // Chart Markers
	};
	var baseURL_ = 'https://chart.googleapis.com/chart';

	function getParams_() {
		return params_;
	}

	function getParam_(key) {
		return params_[key];
	}

	function setParam_(key, val) {
		if (params_[key] !== undefined) {
			params_[key] = val;
		}
	}

	function setParams_(obj) {
		for (var key in obj) {
			setParam_(key, obj[key]);
		}
	}

	/**
	 * Given a base URL and an array of parameters, construct the complete URL.
	 * @return {string} The complete URL for the chart.
	*/
	function getURL_() {
		var paramArray = [];
		for (var key in params_) {
			if (params_[key]) {
				var pairStr = [key, params_[key]].join('=');
				paramArray.push(pairStr);
			}
		}

		var paramStr = paramArray.join('&');
		var url = [baseURL_, paramStr].join('?');
		return url;
	}

	return {
		'getParam': getParam_,
		'getParams': getParams_,
		'setParam': setParam_,
		'setParams': setParams_,
		'getURL': getURL_
	};
};

Ecollect.Report.clientId = '{{ clientId }}';
Ecollect.Report.scopes = 'https://www.googleapis.com/auth/analytics.readonly';
Ecollect.Report.apiKey = '{{ apiKey }}';

Ecollect.Report.dataUri = {
	'ids': '{{ dataIds }}',
	'start-date': '31daysAgo', //date specifics
	'end-date': 'today', //date specitics
	'metrics': 'ga:visits',
	'dimensions': 'ga:day,ga:visitorType',
	'sort': 'ga:day',
	'max-results': 31
};

function handleClientLoad() {

	var authorizeButton = $('#authorize-button');
	authorizeButton.hide();

	//si on a pas de config on sort de suite
	if(Ecollect.Report.clientId === '' || Ecollect.Report.apiKey === '' || Ecollect.Report.dataUri.ids === '' ) {
		console.warn('not configured');
		$('#not-configured').removeClass('hidden');
		return;
	}

	//test bar chart
	google.load("visualization", "1", {packages: ["corechart"]});

	var data = google.visualization.arrayToDataTable([
		['Type', 'Returning visitors', 'New visitors', { role: 'annotation' } ],
		['10', 10, 24, ''],
		['11', 16, 22, ''],
		['12', 28, 19, '']
	]);

	var options = {
		title: 'Visiteurs',
		hAxis: {title: 'Jour', titleTextStyle: {color: 'red'}},
		isStacked: true
	};

	var visualization = new google.visualization.ColumnChart(document.getElementById('test'));
	visualization.draw(data, options);


	var cachedData = Ecollect.localStore.get('ga-visits-url');
	if( cachedData) {
		//si j'ai les données dans le localStorage alors j'ajoute direct dans le DON
		Ecollect.Report.drawChart('visitorDiv',cachedData);
	} else {
		//je load le client analytics
		gapi.client.load('analytics', 'v3', function() {
			// Step 2: Reference the API key
		    gapi.client.setApiKey(Ecollect.Report.apiKey);
		    window.setTimeout(function(){
		        gapi.auth.authorize({client_id: Ecollect.Report.clientId, scope: Ecollect.Report.scopes, immediate: true}, function(authResult){
		        	var authorizeButton = $('#authorize-button');

		        	if (authResult && !authResult.error) {
		          		authorizeButton.hide();
		          		Ecollect.Report.makeApiCall();
		        	} else {
		          		authorizeButton.show();
		          		authorizeButton.click(function(event) {
		        			// Step 3: get authorization to use private data
		        			gapi.auth.authorize({
		        				client_id: Ecollect.Report.clientId,
		        				scope: Ecollect.Report.scopes,
		        				immediate: false}, Ecollect.Report.handleAuthResult);
		        			return false;
		      			});
		        	}
		        })
		    },1);
		});
	}
}

Ecollect.Report.handleAuthResult = function (authResult) {
    var authorizeButton = $('#authorize-button');
    if (authResult && !authResult.error) {
      authorizeButton.hide();
      Ecollect.Report.makeApiCall();
    } else {
      authorizeButton.show();
      authorizeButton.click(Ecollect.Report.handleAuthClick);
    }
};

Ecollect.Report.handleAuthClick = function() {
	// Step 3: get authorization to use private data
	gapi.auth.authorize({
		client_id: Ecollect.Report.clientId,
		scope: Ecollect.Report.scopes,
		immediate: false}, Ecollect.Report.handleAuthResult);
	return false;
};

/**
 * Load the API and make an API call.  Display the results on the screen.
 * Get report from cache or do real call
 */
Ecollect.Report.makeApiCall = function() {

	console.log('in makeApiCall');

	// Step 4: Load the Google+ API
	var apiQuery = gapi.client.analytics.data.ga.get(Ecollect.Report.dataUri);
	apiQuery.execute(function(results) {
		if (!results.error) {

			console.log(results);

			//TODO p-e utiliser l'api google.visualisation plutot que la technique de l'url
			//@see https://developers.google.com/chart/interactive/docs/gallery/barchart#StackedBars
			var chartData = Ecollect.Report.getVisitorChartData(results);

			console.log(chartData);

			var barChart = Ecollect.Report.getBarChart(chartData);

			//On cache l'url obtenu dans le localStorage
			var url = barChart.getURL();
			Ecollect.localStore.cache('ga-visits-url', function() { return url; }, 120); //on cache cette url pour 120min

			Ecollect.Report.drawChart('visitorDiv',url);
			return results;

		} else {
			console.error('There was an error: ' + results.message);
			return false;
		}
	});
};

Ecollect.Report.getVisitorChartData = function(result) {
	var entries = result.rows;
	var returningVisitors = [];
	var newVisitors = [];
	var days = [];
	var maxReturningVisitors = 0;
	var maxNewVisitors = 0;

	//for (var i = 0, entry; entry = entries[i]; ++i) {
	entries.forEach(function(entry){
		var day = parseInt(entry[0]);
		var visType = entry[1];
		var numVisits = entry[2];

		// At the beginning of each day, check if data was missing for previous
		// day.  Insert "0" in appropriate visitor's array as necessary, using
		// fillToSameSize helper method.
		if (!days.length) {
			days.push(day);
		} else {
			var lastDay = days[days.length - 1];
			if (day != lastDay) {
				days.push(day);
				//newVisitors.push('0');
				Ecollect.fillToSameSize(newVisitors, returningVisitors);
			}
		}

		if (visType == 'New Visitor') {
			newVisitors.push(numVisits);
			maxNewVisitors = Math.max(maxNewVisitors, numVisits);
		} else {
			returningVisitors.push(numVisits);
			maxReturningVisitors = Math.max(maxReturningVisitors, numVisits);
		}
	});

	Ecollect.fillToSameSize(newVisitors, returningVisitors);

	return {
		'returningVisitors': returningVisitors,
		'newVisitors': newVisitors,
		'maxNewVisitors': maxNewVisitors,
		'maxReturningVisitors': maxReturningVisitors,
		'days': days
	};
};

Ecollect.Report.getBarChart = function(chartData) {

	var chart = Ecollect.Report.getChartObj();
	var returningVisitorsStr = chartData.returningVisitors.join();
	var newVisitorsStr = chartData.newVisitors.join();
	var maxValue = chartData.maxReturningVisitors + chartData.maxNewVisitors;

	var scaleData = Ecollect.scaleData(maxValue);

	// Set chart meta-data
	chart.setParams({
		'chs': '500x150', //Image dimensions
		'chxt': 'x,y', //Axes
		'chts': '000000,15', //Title Style
		'cht': 'bvs', //Chart Type (Bar, Vertical, Stacked)
		'chco': 'a3d5f7,389ced', //Colors
		'chbh': 'a,5,20', //Width & Spacing
		'chm': 'N,FF0000,-1,,12', //Markers
		'chtt': 'Visiteurs+par+Type', //Title
		'chdl': 'Visiteurs+connus|Nouveau+Visiteurs', //Legend
		'chd': 't:' + returningVisitorsStr + '|' + newVisitorsStr, //Chart Data
		'chxl': '0:|' + chartData.days.join('|'), //Axis Labels
		'chds': '0,' + scaleData[0], //Scaling
		'chxr': '1,0,' + scaleData[0] + ',' + scaleData[1] //Axis Scaling
	});

	return chart;
};

{# Je laisse la fonction mais elle ne sert pas
Ecollect.Report.getPieChart = function(chartData) {
  var chart = Ecollect.Report.getChartObj();
  var newVisitors = Ecollect.getArraySum(chartData.newVisitors);
  var returningVisitors = Ecollect.getArraySum(chartData.returningVisitors);

  chartData.maxValue = returningVisitors + newVisitors;

  chart.setParams({
    'chs': '500x150', //Image dimensions
    'chts': '000000,15', //Title Style
    'cht': 'p3', //Chart Type
    'chco': 'a3d5f7,389ced', //Colors
    'chtt': 'Visitors+By+Type', //Title
    'chdl': 'Returning+Visitors|New+Visitors', //Legend
    'chd': 't:' + returningVisitors + ',' + newVisitors, //Chart Data
    'chl': returningVisitors + '|' + newVisitors, //Labels
    'chds': '0,' + chartData.maxValue //Max Value
  });

  return chart;
};
#}

Ecollect.Report.drawChart = function(parentElementId, url) {
	document.getElementById(parentElementId).innerHTML += '<img src="' + url + '" /></br />';
};
</script>

	 <!-- The 2 Buttons for the user to interact with -->
    <button id="authorize-button" class="btn btn-primary">{{ "Authorize" | trans }}</button><br/>
    <p id="not-configured" class="hidden">{{ "Your eDonate application is not configured to get the Google Analytics stats" | trans }}</p>
    <noscript>
		<p>{{ "The Visits block require javascript enabled on your web browser" | trans }}</p>
    </noscript>
	<div id="visitorDiv"></div>

	<div id="test"></div>

	<script src="https://apis.google.com/js/client.js?onload=handleClientLoad"></script>

{% endspaceless %}
{% endblock %}

{% block footer %}
{% spaceless %}
    <div class="panel-footer">
        <a href="https://www.google.com/analytics/web/?hl=fr">Google Analytics</a>
    </div>
{% endspaceless %}
{% endblock %}
