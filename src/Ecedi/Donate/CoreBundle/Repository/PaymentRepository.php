<?php

namespace Ecedi\Donate\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Ecedi\Donate\CoreBundle\Entity\Payment;

/**
 * PaymentRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaymentRepository extends EntityRepository
{
    /**
     * Fonction qui retourne les paiements pour une intent spécifique.
     *
     * @param array $parameters
     * @param int   $limit
     */
    public function getPaymentsListByIntent($parameters, $limit = 20)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.intent = :intentId')
           ->setParameter('intentId', $parameters['intentId'])
           ->setMaxResults($limit);

        return $qb->getQuery();
    }

    /**
     * Fonction qui retourne les meilleurs donateurs (paiements encaissés).
     *
     * @param int $limit
     */
    public function getHighestDonatorPayment($limit = 5)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->select('c.id AS customerId, c.lastName, c.firstName, SUM(i.amount) AS totalPayment')
           ->join('p.intent', 'i')
           ->join('i.customer', 'c')
           ->where('p.status = :paymentStatus')
           ->groupBy('customerId')
           ->orderBy('totalPayment', 'DESC')
           ->setMaxResults($limit);

        $qb->setParameters([
            'paymentStatus' => Payment::STATUS_PAYED,
        ]);

        return $qb->getQuery()->getResult();
    }

    /**
     * [getNewPaymentsQuery description].
     *
     * @param int $limit [description]
     *
     * @return [type] [description]
     */
    public function getNewPayments($limit = 100)
    {
        $qb = $this->createQueryBuilder('p');
        $qb->where('p.status = :status')
        ->andWhere('p.response is not null')
            //->orderBy('id', 'ASC')
            ->setMaxResults($limit)
            ->setParameters(['status' => Payment::STATUS_NEW])
        ;

        return $qb->getQuery()->getResult();
    }
}
